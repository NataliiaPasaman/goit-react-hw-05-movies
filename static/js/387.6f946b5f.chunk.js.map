{"version":3,"file":"static/js/387.6f946b5f.chunk.js","mappings":"sPAEaA,EAAWC,EAAAA,GAAAA,GAAH,mKAQRC,EAAWD,EAAAA,GAAAA,GAAH,4DAKRE,EAAeF,EAAAA,GAAAA,IAAH,uDAKZG,EAAaH,EAAAA,GAAAA,IAAH,uEAMVI,EAAYJ,EAAAA,GAAAA,GAAH,+G,SCWtB,EA7Ba,SAAC,GAAiB,IAAfK,EAAc,EAAdA,QACZ,GAAyBC,EAAAA,EAAAA,UAAS,MAAlC,eAAOC,EAAP,KAAcC,EAAd,KAOA,IALAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBL,EAAS,WAAWM,MAAK,SAAAC,GAAI,OAAIJ,EAAQI,EAAKC,KAAjB,IAChDC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,EAAMG,QAA7B,GACR,GAAE,CAACb,IAECE,EACL,OACE,+BACA,SAACR,EAAD,UACGQ,EAAMY,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACjC,OACE,UAACrB,EAAD,YACE,SAACC,EAAD,WACA,SAACC,EAAD,CACAoB,IAAKD,EAAY,UAAME,EAAAA,GAAN,YAAyBF,GAAiBG,EAAAA,GAC3DC,IAAKN,OAEL,SAAChB,EAAD,UAAYgB,GAAQC,MANPD,EASlB,OAIR,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\ndisplay: grid;\ngrid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\ngrid-gap: 20px;\npadding-top: 20px;\npadding-bottom: 10px;\n`;\n\nexport const CastItem = styled.li`\nborder-radius: 2px;\nwidth: 200px;\n`;\n\nexport const ImageWrapper = styled.div`\nwidth: 200px;\nheight: 300px;\n`\n\nexport const PosterCast = styled.img`\ndisplay: block;\nwidth: 200px;\nheight: auto;\n`;\n\nexport const TitleCast = styled.h4`\npadding: 10px;\ncolor: black;\nfont-weight: 700;\nfont-size: 16px;\nline-height: 1.4;\n`;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { useState, useEffect } from 'react';\nimport { getMovieCastReviews } from 'services/api';\nimport { BASE_POSTER_URL } from 'constans/constans';\nimport { PosterCast, TitleCast, CastList, CastItem, ImageWrapper } from './Cast.styled';\nimport { DEFAULT_IMAGE } from 'constans/constans';\n\nconst Cast = ({ movieId }) => {\n    const [casts, setCast] = useState(null);\n\n    useEffect(() => {\n      getMovieCastReviews(movieId, 'credits').then(data => setCast(data.cast))\n      .catch((error) => console.log(error.message));\n    }, [movieId])\n\n    if (!casts) return;\n    return (\n      <>\n      <CastList>\n        {casts.map(({ name, original_name, profile_path }) => {\n          return (\n            <CastItem key={name}>\n              <ImageWrapper>\n              <PosterCast \n              src={profile_path ? `${BASE_POSTER_URL}/${profile_path}` : DEFAULT_IMAGE} \n              alt={name} />\n              </ImageWrapper>\n              <TitleCast>{name || original_name}</TitleCast>\n            </CastItem>\n          );\n        })}\n      </CastList>\n      </>\n    );\n}\n\nexport default Cast;\n\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n}"],"names":["CastList","styled","CastItem","ImageWrapper","PosterCast","TitleCast","movieId","useState","casts","setCast","useEffect","getMovieCastReviews","then","data","cast","catch","error","console","log","message","map","name","original_name","profile_path","src","BASE_POSTER_URL","DEFAULT_IMAGE","alt"],"sourceRoot":""}