{"version":3,"file":"static/js/556.a23035ef.chunk.js","mappings":"mQAEaA,EAAaC,EAAAA,GAAAA,KAAH,gPAYVC,EAAQD,EAAAA,GAAAA,MAAH,kYAuBLE,EAASF,EAAAA,GAAAA,OAAH,0W,2CChCNG,EAAoB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5BC,GAAWC,EAAAA,EAAAA,MAEjB,OAAOF,EAAOG,KAAI,SAAAC,GAChB,IAAQC,EAAyDD,EAAzDC,GAAIC,EAAqDF,EAArDE,MAAOC,EAA8CH,EAA9CG,eAAgBC,EAA8BJ,EAA9BI,YAAaC,EAAiBL,EAAjBK,aAEhD,OACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAMC,GAAE,UAAKL,GAAMM,MAAO,CAAEC,KAAMX,GAAlC,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEY,IAAKL,EAAW,UAAMM,EAAAA,GAAN,YAAyBN,GAAgBO,EAAAA,GACzDC,MAAM,MACNC,IAAKX,KAEP,4BACE,SAAC,KAAD,UAAYA,GAASC,KACrB,UAAC,KAAD,uBAAwBE,cAVhBJ,EAgBnB,GACF,ECzBYa,EAAgB,SAAC,GAAgB,IAAdlB,EAAa,EAAbA,OAC9B,OACE,SAAC,IAAD,WACE,SAACD,EAAD,CAAmBC,OAAQA,KAGhC,ECoDD,EArDe,WAAO,IAAD,EACnB,GAAwCmB,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BL,EAAAA,EAAAA,WAAS,GAAvC,eAAOM,EAAP,KAAgBC,EAAhB,KAEMC,EAAK,UAAGJ,EAAaK,IAAI,gBAApB,QAAgC,GAwB3C,OACE,iCACE,UAACjC,EAAD,CAAYkC,SApBC,SAAAC,GAEf,GADAA,EAAIC,iBACAJ,GACAJ,EAAJ,CAEAG,GAAW,GACX,IACMM,EAAW,+BAA2BL,EAA3B,gCACjBM,EAAAA,EAAAA,IAFiB,eAEED,GAAaE,MAAK,SAAAC,GAEnC,GADAd,EAAgBc,GACbf,EAAagB,QAAU,EACxB,OAAOC,MAAM,6BAEhB,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAtB,IACXC,SAAQ,kBAAMjB,GAAW,EAAjB,GAZe,CAazB,EAIG,WAEE,SAAC7B,EAAD,CACE+C,SA3Be,SAAAd,GACrBN,EAAgB,CAAEG,MAAOG,EAAIe,OAAOC,OACrC,EA0BOC,KAAK,OACLC,KAAMrB,EACNmB,MAAOnB,EACPsB,aAAa,MACbC,WAAS,EACTC,YAAY,kBAEd,SAACrD,EAAD,CAAQiD,KAAK,SAAb,UACE,SAAC,MAAD,CAAUK,KAAM,UAInB3B,IAAW,SAAC4B,EAAA,EAAD,IACXjC,EAAagB,OAAS,IAAMX,IAAW,SAACP,EAAD,CAAelB,OAAQoB,MAGpE,C","sources":["pages/Movies/Movies.styled.js","components/GalleryMoviesItem/GalleryMoviesItem.jsx","components/GalleryMovies/GalleryMovies.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n\n  padding: 20px;\n  text-align: center;\n  background: linear-gradient(to right, #F37335, #FDC830);\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 18px;\n  font-weight: 700;\n  border: 1px solid transparent;\n  outline: none;\n  padding: 5px 10px;\n  color: black;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 16px;\n    color: red;\n  }\n\n  &:focus-within {\n    outline: rgb(0 0 0 / 0%);\n    border-color: white;\n  }\n`;\n\nexport const Button = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 33px;\n  border: 0;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n    box-shadow: 0px 1px 3px rgb(0 0 0 / 12%), 0px 1px 1px rgb(0 0 0 / 14%),\n      0px 2px 1px rgb(0 0 0 / 20%);\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { Link, useLocation } from 'react-router-dom';\nimport { BASE_POSTER_URL, DEFAULT_IMAGE } from \"constans/constans\";\nimport { MovieItem, CardWrapper, MovieName, PosterMovie, MovieRaiting } from \"./GalleryMoviesItem.styled\";\n\nexport const GalleryMoviesItem = ({ movies }) => {\n  const location = useLocation();\n\n  return movies.map(movie => {\n    const { id, title, original_title, poster_path, vote_average } = movie;\n\n    return (\n      <MovieItem key={id}>\n        <Link to={`${id}`} state={{ from: location }}>\n          <CardWrapper>\n            <PosterMovie\n              src={poster_path ? `${BASE_POSTER_URL}/${poster_path}` : DEFAULT_IMAGE}\n              width=\"450\"\n              alt={title}\n            />\n            <div>\n              <MovieName>{title || original_title}</MovieName>\n              <MovieRaiting>Raiting: {vote_average}</MovieRaiting>\n            </div>\n          </CardWrapper>\n        </Link>\n      </MovieItem>\n    );\n  });\n};\n\nGalleryMoviesItem.propTypes = {\n    movies: PropTypes.array,\n}\n","import PropTypes from \"prop-types\";\nimport { MoviesList } from \"./GalleryMovies.styled\";\nimport { GalleryMoviesItem } from \"components/GalleryMoviesItem/GalleryMoviesItem\";\n\nexport const GalleryMovies = ({ movies }) => {\n  return (\n    <MoviesList>\n      <GalleryMoviesItem movies={movies} />\n    </MoviesList>\n  );\n};\n\nGalleryMovies.propTypes = {\n    movies: PropTypes.array.isRequired,\n}","import React from 'react';\nimport { movieAPI } from 'services/api';\nimport { GoSearch } from 'react-icons/go';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { SearchForm, Input, Button } from './Movies.styled';\nimport { GalleryMovies } from 'components/GalleryMovies/GalleryMovies';\n\nconst Movies = () => {\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n\n  const query = searchParams.get(\"query\") ?? \"\";\n\n  const onSearchChange = evt => {\n    setSearchParams({ query: evt.target.value });\n  };\n\n  const onSubmit = evt => {\n    evt.preventDefault();\n    if(!query) return;\n    if(!searchParams) return;\n\n    setLoading(true);\n    const apiQuery = 'search/movie';\n    const paramsQuery = `language=en-US&query=${query}&page=1&include_adult=false`;\n    movieAPI(apiQuery, paramsQuery).then(response => {\n      setSearchMovies(response); \n      if(searchMovies.length <= 0) {\n        return alert('No movies for your request');\n      }\n    })\n    .catch(error => console.log(error.message))\n    .finally(() => setLoading(false));\n  };\n\n  return (\n    <>\n      <SearchForm onSubmit={onSubmit}>\n        \n        <Input\n          onChange={onSearchChange}\n          type=\"text\"\n          name={query}\n          value={query}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movie\"\n        />\n        <Button type=\"submit\">\n          <GoSearch size={20} />\n        </Button>\n\n      </SearchForm>\n      {loading && <Loader />}\n      {searchMovies.length > 0 && !loading && <GalleryMovies movies={searchMovies} />}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["SearchForm","styled","Input","Button","GalleryMoviesItem","movies","location","useLocation","map","movie","id","title","original_title","poster_path","vote_average","to","state","from","src","BASE_POSTER_URL","DEFAULT_IMAGE","width","alt","GalleryMovies","useState","searchMovies","setSearchMovies","useSearchParams","searchParams","setSearchParams","loading","setLoading","query","get","onSubmit","evt","preventDefault","paramsQuery","movieAPI","then","response","length","alert","catch","error","console","log","message","finally","onChange","target","value","type","name","autoComplete","autoFocus","placeholder","size","Loader"],"sourceRoot":""}